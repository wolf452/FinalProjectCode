pipeline {
    agent any

    environment {
        TERRAFORM_DIR = 'terraform'
        BACKEND_DIR = 'terraform'
        ANSIBLE_DIR = '../terr/ansible'
        INVENTORY_FILE = 'inventory'
        AWS_ACCESS_KEY_ID = credentials('aws-access-key')  // Use the correct credentials
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-key')  // Use the correct credentials
        AWS_REGION = 'us-east-1'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/wolf452/FinalProjectCode.git'
            }
        }

        stage('Terraform Init') {
            steps {
                dir("${env.TERRAFORM_DIR}") {
                    withCredentials([aws(credentialsId: 'aws-cred')]) {
                        script {
                            env.TF_VAR_AWS_ACCESS_KEY = env.AWS_ACCESS_KEY_ID
                            env.TF_VAR_AWS_SECRET_KEY = env.AWS_SECRET_ACCESS_KEY
                        }
                        sh 'terraform init -force-copy'
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir("${env.TERRAFORM_DIR}") {
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Backend Terraform Init') {
            steps {
                dir("${env.BACKEND_DIR}") {
                    sh 'terraform init'
                }
            }
        }

        stage('Backend Terraform Apply') {
            steps {
                dir("${env.BACKEND_DIR}") {
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Get Public IP') {
            steps {
                script {
                    // استخدام المخرج الصحيح الذي هو "ec2_public_ips"
                    env.PUBLIC_IP = sh(script: "cd ${env.TERRAFORM_DIR} && terraform output -raw ec2_public_ips", returnStdout: true).trim()
                    
                    // تحقق من أن المخرج ليس فارغًا
                    if (env.PUBLIC_IP) {
                        echo "Public IP: ${env.PUBLIC_IP}"
                    } else {
                        error "Public IP output not found in Terraform state"
                    }
                }
            }
        }

        stage('Update Ansible Inventory') {
            steps {
                dir("${ANSIBLE_DIR}") {
                    script {
                        // تحديث محتوى ملف inventory باستخدام عنوان الـ IP العام الذي تم الحصول عليه
                        def inventoryContent = "[ec2]\n${env.PUBLIC_IP} ansible_user=ubuntu\n"
                        writeFile file: "${env.INVENTORY_FILE}", text: inventoryContent
                    }
                }
            }
        }

        stage('Delay Before Ansible Playbook') {
            steps {
                script {
                    echo "Waiting for 1 minute before proceeding..."
                    sleep time: 80, unit: 'SECONDS'
                    echo "Proceeding to run Ansible playbook..."
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                dir("${ANSIBLE_DIR}") {
                    withCredentials([sshUserPrivateKey(credentialsId: 'ansible-ssh-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                        script {
                            // Ensure the key has the correct permissions
                            sh 'chmod 400 $SSH_PRIVATE_KEY'
                            // Run the Ansible playbook
                            sh '''
                            ansible-playbook -K -i ${INVENTORY_FILE} playbook.yml --private-key=/var/lib/jenkins/workspace/terr/ansible/ivolve.pem --user=ubuntu
                            '''
                        }
                    }
                }
            }
        }
    }
}
