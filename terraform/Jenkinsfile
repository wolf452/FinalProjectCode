pipeline {
    agent any

    environment {
        TF_VAR_AWS_ACCESS_KEY = credentials('aws-access-key') 
        TF_VAR_AWS_SECRET_KEY = credentials('aws-secret-key') 
        ANSIBLE_PRIVATE_KEY = credentials('ansible-ssh-key') 
        AWS_DEFAULT_REGION = 'us-east-1' 
        TF_LOG = 'DEBUG' 
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/wolf452/FinalProjectCode.git'
            }
        }

        stage('Terraform Apply and Get EC2 IP') {
            steps {
                dir('terraform') {
                    sh 'terraform init'
                    sh 'terraform apply -auto-approve'

                    script {
                        def terraformOutput = sh(script: 'terraform output -json', returnStdout: true).trim()
                        def outputJson = readJSON(text: terraformOutput)
                        def publicIp = outputJson?.ec2_public_ips?.value

                        if (!publicIp) error "EC2 public IP not found in Terraform output."

                        echo "EC2 Public IP: ${publicIp}"

                        dir('ansible') {
                            writeFile file: 'inventory', text: "[web]\n${publicIp} ansible_user=ubuntu ansible_ssh_private_key_file=${ANSIBLE_PRIVATE_KEY}"
                            echo "Inventory content:"
                            sh 'cat inventory'
                            sh "cp /var/lib/jenkins/workspace/terr/terraform/ansible/inventory /var/lib/jenkins/workspace/terr/ansible"
                            
                            script {
                                def inventoryContent = readFile 'inventory'
                                if (!inventoryContent.contains('[web]')) {
                                    error "Invalid inventory file. Host group [web] not found."
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Run Ansible') {
            steps {
                dir('ansible') {
                    sh 'chmod 600 ${ANSIBLE_PRIVATE_KEY}'
                    sh 'ansible-inventory -i inventory --list'
                    ansiblePlaybook inventory: 'inventory', playbook: 'playbook.yml', credentialsId: 'ansible-ssh-key', extras: "-u ubuntu --private-key=${ANSIBLE_PRIVATE_KEY}"
                }
            }
        }
    }

    post {
        always {
            sh 'rm -f ${ANSIBLE_PRIVATE_KEY}'
            archiveArtifacts artifacts: '**/ansible/inventory, terraform/terraform.tfstate', fingerprint: true
            cleanWs()
        }
    }
}
