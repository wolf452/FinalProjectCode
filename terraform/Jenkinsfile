pipeline {
    agent any

    environment {
        TF_VAR_AWS_ACCESS_KEY = credentials('aws-access-key') 
        TF_VAR_AWS_SECRET_KEY = credentials('aws-secret-key') 
        ANSIBLE_PRIVATE_KEY = credentials('ansible-ssh-key') 
        AWS_DEFAULT_REGION = 'us-east-1' 
        TF_LOG = 'DEBUG' 
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/wolf452/FinalProjectCode.git'
            }
        }

        stage('Terraform Apply and Get EC2 IP') {
            steps {
                dir('terraform') {
                    sh 'terraform init'
                    sh 'terraform apply -auto-approve'

                    // Refresh Terraform state to ensure outputs are accurate
                    sh 'terraform refresh'

                    script {
                        // Capture Terraform output
                        def terraformOutput = sh(script: 'terraform output -json', returnStdout: true).trim()
                        def outputJson = readJSON(text: terraformOutput)

                        // Extract public IP and public DNS from the output
                        def publicIp = outputJson?.ec2_public_ips?.value
                        def publicDns = outputJson?.ec2_public_dns?.value

                        // Error handling if public IP or DNS is not found
                        if (!publicIp) error "EC2 public IP not found in Terraform output."
                        if (!publicDns) error "EC2 public DNS not found in Terraform output."

                        // Print the values of public IP and DNS
                        echo "EC2 Public IP: ${publicIp}"
                        echo "EC2 Public DNS: ${publicDns}"

                        dir('ansible') {
                            // Write the public DNS to the inventory file
                            writeFile file: 'inventory', text: "[web]\n${publicDns} ansible_user=ubuntu"

                            // Print inventory content for verification
                            echo "Inventory content:"
                            sh 'cat inventory'

                            // Copy the inventory to the correct location
                            sh 'cp inventory /var/lib/jenkins/workspace/terr/ansible'

                            // Ensure the correct permissions for the inventory file
                            sh 'chmod 400 /var/lib/jenkins/workspace/terr/ansible/inventory'

                            script {
                                // Validate the content of the inventory file
                                def inventoryContent = readFile 'inventory'
                                if (!inventoryContent.contains('[web]')) {
                                    error "Invalid inventory file. Host group [web] not found."
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Wait for Instance to be Ready') {
            steps {
                echo 'Waiting for EC2 Instance to be ready...'
                sleep time: 100, unit: 'SECONDS' 
                echo 'Sleep complete. Proceeding to Ansible execution.'
            }
        }

        stage('Run Ansible') {
            steps {
                dir('ansible') {
                   
                    sh 'ansible-inventory -i inventory --list'
                    ansiblePlaybook inventory: 'inventory', playbook: 'playbook.yml', extras: "-u ubuntu --private-key=/var/lib/jenkins/workspace/terr/ansible/ansible-keyproj.pem"
                }
            }
        }
    }

    post {
        always {
            // Clean up the private key after use
            sh 'rm -f ${ANSIBLE_PRIVATE_KEY}'

            // Archive important artifacts
            archiveArtifacts artifacts: '**/ansible/inventory, terraform/terraform.tfstate', fingerprint: true

            // Clean workspace after the job completes
            cleanWs()
        }
    }
}
