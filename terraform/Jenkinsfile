pipeline {
    agent any

    environment {
        TF_VAR_AWS_ACCESS_KEY = credentials('aws-access-key') // AWS access key from Jenkins credentials
        TF_VAR_AWS_SECRET_KEY = credentials('aws-secret-key') // AWS secret key from Jenkins credentials
        ANSIBLE_PRIVATE_KEY = credentials('ansible-ssh-key') // Secret text with SSH private key
        AWS_DEFAULT_REGION = 'us-east-1'
        TF_LOG = 'DEBUG'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/wolf452/FinalProjectCode.git'
            }
        }

        stage('Configure AWS CLI') {
            steps {
                script {
                    // Configure AWS CLI with the access and secret keys
                    sh 'aws configure set aws_access_key_id ${TF_VAR_AWS_ACCESS_KEY}'
                    sh 'aws configure set aws_secret_access_key ${TF_VAR_AWS_SECRET_KEY}'
                    sh 'aws configure set region ${AWS_DEFAULT_REGION}'
                    
                    // Optional: Print the access and secret key for debugging (use cautiously)
                    echo "AWS Access Key: ${TF_VAR_AWS_ACCESS_KEY}"
                    echo "AWS Secret Key: ${TF_VAR_AWS_SECRET_KEY}"
                }
            }
        }

        stage('Terraform Init') {
            steps {
                dir('terraform') {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir('terraform') {
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Get EC2 IP') {
            steps {
                dir('terraform') {
                    script {
                        // Get the EC2 instance's public IP from Terraform output
                        def terraformOutput = sh(script: 'terraform output -json', returnStdout: true)
                        def publicIp = readJSON(text: terraformOutput).ec2_public_ip.value
                        
                        // Prepare the Ansible inventory file with the EC2 instance IP and SSH private key
                        dir('ansible') {
                            writeFile file: 'inventory', text: "[web]\n${publicIp} ansible_user=ubuntu ansible_ssh_private_key_data=${env.ANSIBLE_PRIVATE_KEY}"
                        }
                    }
                }
            }
        }

        stage('Run Ansible') {
            steps {
                dir('ansible') {
                    // Run the Ansible playbook using the generated inventory
                    ansiblePlaybook credentialsId: 'ansible-ssh-key', inventory: 'inventory', playbook: 'playbook.yml'
                }
            }
        }
    }

    post {
        always {
            // Archive the inventory and terraform state files for later inspection
            archiveArtifacts artifacts: 'inventory, terraform.tfstate', fingerprint: true
            cleanWs() // Clean the workspace after the job completes
        }
    }
}
